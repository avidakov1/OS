function Matrix.new 1
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 1
push argument 0
push argument 0
call Math.multiply 2
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
push this 1
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Matrix.getElem 0
push argument 0
pop pointer 0
push argument 1
push this 1
lt
not
push argument 2
push this 1
lt
not
or
push argument 1
push constant 0
lt
or
push argument 2
push constant 0
lt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call Sys.halt 0
pop temp 0
label IF_FALSE0
push argument 1
push this 1
call Math.multiply 2
push argument 2
add
push this 0
add
pop pointer 1
push that 0
return
function Matrix.setElem 0
push argument 0
pop pointer 0
push argument 2
push this 1
lt
not
push argument 3
push this 1
lt
not
or
push argument 2
push constant 0
lt
or
push argument 3
push constant 0
lt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call Sys.halt 0
pop temp 0
label IF_FALSE0
push argument 2
push this 1
call Math.multiply 2
push argument 3
add
push this 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Matrix.getSize 0
push argument 0
pop pointer 0
push this 1
return
function Matrix.add 2
push argument 0
pop pointer 0
push this 1
push argument 1
call Matrix.getSize 1
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call Sys.halt 0
pop temp 0
label IF_FALSE0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 0
push this 1
call Math.multiply 2
push local 1
add
push this 0
add
push local 0
push this 1
call Math.multiply 2
push local 1
add
push this 0
add
pop pointer 1
push that 0
push argument 1
push local 0
push local 1
call Matrix.getElem 3
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Matrix.multScalar 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
push this 1
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push local 0
push this 0
add
pop pointer 1
push that 0
push argument 1
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Matrix.multMat 4
push argument 0
pop pointer 0
push this 1
push argument 1
call Matrix.getSize 1
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call Sys.halt 0
pop temp 0
label IF_FALSE0
push this 1
push this 1
call Math.multiply 2
call Array.new 1
pop local 3
label WHILE_EXP0
push local 0
push this 1
push this 1
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 0
push local 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 1
lt
not
if-goto WHILE_END1
push constant 0
pop local 1
label WHILE_EXP2
push local 1
push this 1
lt
not
if-goto WHILE_END2
push constant 0
pop local 2
label WHILE_EXP3
push local 2
push this 1
lt
not
if-goto WHILE_END3
push local 0
push this 1
call Math.multiply 2
push local 1
add
push local 3
add
push local 0
push this 1
call Math.multiply 2
push local 2
add
push this 0
add
pop pointer 1
push that 0
push argument 1
push local 2
push local 1
call Matrix.getElem 3
call Math.multiply 2
push local 0
push this 1
call Math.multiply 2
push local 1
add
push local 3
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP3
label WHILE_END3
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP4
push local 0
push this 1
push this 1
call Math.multiply 2
lt
not
if-goto WHILE_END4
push local 0
push this 0
add
push local 0
push local 3
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP4
label WHILE_END4
push local 3
call Array.dispose 1
pop temp 0
push constant 0
return
function Matrix.eye 2
push argument 0
call Matrix.new 1
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push argument 0
lt
not
if-goto WHILE_END0
push local 0
push constant 1
push local 1
push local 1
call Matrix.setElem 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Matrix.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Matrix.print 3
push argument 0
call Matrix.getSize 1
pop local 2
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push local 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push local 2
lt
not
if-goto WHILE_END1
push argument 0
push local 0
push local 1
call Matrix.getElem 3
call Output.printInt 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
call Output.println 0
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Matrix.norm 2
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
push this 1
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 1
push local 0
push this 0
add
pop pointer 1
push that 0
push local 0
push this 0
add
pop pointer 1
push that 0
call Math.multiply 2
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
call Math.sqrt 1
return
